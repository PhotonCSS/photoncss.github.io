{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home With bootstrap-like classes and React components, go from 0 to app in seconds. Blazing Fast Photon now tracks what elements need to be changed using an HTML attribute. Only processing what it has to, Photon is ultra-efficient and performs very well on everything from toasters & microwaves, to NASA supercomputers. Developer Focused Dive right in with whatever your comfortable with. If you're a React developer, install the react components. If not, just reference the scripts and stylesheets like usual. Responsive Adapting to all screen sizes, Photon will look and feel exactly the way your users would expect it to if it was installed on their device.","title":"Home"},{"location":"#home","text":"With bootstrap-like classes and React components, go from 0 to app in seconds.","title":"Home"},{"location":"#blazing-fast","text":"Photon now tracks what elements need to be changed using an HTML attribute. Only processing what it has to, Photon is ultra-efficient and performs very well on everything from toasters & microwaves, to NASA supercomputers.","title":"Blazing Fast"},{"location":"#developer-focused","text":"Dive right in with whatever your comfortable with. If you're a React developer, install the react components. If not, just reference the scripts and stylesheets like usual.","title":"Developer Focused"},{"location":"#responsive","text":"Adapting to all screen sizes, Photon will look and feel exactly the way your users would expect it to if it was installed on their device.","title":"Responsive"},{"location":"getting-started/","text":"Getting Started Guide Install Photon and its dependencies. 1 npm install --save-dev photoncss jquery react react-dom Set up the main file 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import React from \"react\" ; import { render } from \"react-dom\" ; import { ThemeProvider } from \"photoncss/react\" ; // Import Photon in to the project import \"photoncss/dist/photon.css\" ; // Import the Photon stylesheet // Create the root element export function Root () { return ( < ThemeProvider global > < p > PhotonCSS Demo < /p> < /ThemeProvider> ); } // Wait for the DOM to load before rendering document . addEventListener ( \"DOMContentLoaded\" , function () { // Append a container to the DOM to render content into const root = document . createElement ( \"DIV\" ); root . id = \"root\" ; document . body . append ( root ); // Render root component into react-root container render ( < Root /> , document . getElementById ( \"root\" )); }); Importing components All components are imported from the module photoncss/react . 1 2 3 4 5 6 7 8 9 import { Button } from \"photoncss/react\" export function Root () { return ( < ThemeProvider global > < Button variant = \"raised\" color = \"primary\" > Hello World < /Button> < /ThemeProvider> ); } Using custom themes For custom themes, you need the <ThemeProvider/> component.","title":"Getting Started Guide"},{"location":"getting-started/#getting-started-guide","text":"Install Photon and its dependencies. 1 npm install --save-dev photoncss jquery react react-dom","title":"Getting Started Guide"},{"location":"getting-started/#set-up-the-main-file","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import React from \"react\" ; import { render } from \"react-dom\" ; import { ThemeProvider } from \"photoncss/react\" ; // Import Photon in to the project import \"photoncss/dist/photon.css\" ; // Import the Photon stylesheet // Create the root element export function Root () { return ( < ThemeProvider global > < p > PhotonCSS Demo < /p> < /ThemeProvider> ); } // Wait for the DOM to load before rendering document . addEventListener ( \"DOMContentLoaded\" , function () { // Append a container to the DOM to render content into const root = document . createElement ( \"DIV\" ); root . id = \"root\" ; document . body . append ( root ); // Render root component into react-root container render ( < Root /> , document . getElementById ( \"root\" )); });","title":"Set up the main file"},{"location":"getting-started/#importing-components","text":"All components are imported from the module photoncss/react . 1 2 3 4 5 6 7 8 9 import { Button } from \"photoncss/react\" export function Root () { return ( < ThemeProvider global > < Button variant = \"raised\" color = \"primary\" > Hello World < /Button> < /ThemeProvider> ); }","title":"Importing components"},{"location":"getting-started/#using-custom-themes","text":"For custom themes, you need the <ThemeProvider/> component.","title":"Using custom themes"},{"location":"components/button/","text":"Button Buttons allow users to take actions, and make choices, with a single tap. material.io Importing 1 2 3 4 5 6 7 8 import React from \"react\" ; import { Button } from \"photoncss/react\" ; export default function Component () { return ( < Button > text < /Button> ); } Props Name Default Possible Values Type Description color none none , primary , secondary string Sets the color of the button. display inline block , inline string Sets the display property of the button. size normal dense , normal , large string Sets the size of the button. variant contained contained , flat , outlined , raised string Sets the variant of the button. waves true Boolean value boolean Sets weather or not the button should have a ripple/waves effect when interacted with. Note Props other than those listed above such as className and style will be passed directly to the <button/> element.","title":"Button"},{"location":"components/button/#button","text":"Buttons allow users to take actions, and make choices, with a single tap. material.io","title":"Button"},{"location":"components/button/#importing","text":"1 2 3 4 5 6 7 8 import React from \"react\" ; import { Button } from \"photoncss/react\" ; export default function Component () { return ( < Button > text < /Button> ); }","title":"Importing"},{"location":"components/button/#props","text":"Name Default Possible Values Type Description color none none , primary , secondary string Sets the color of the button. display inline block , inline string Sets the display property of the button. size normal dense , normal , large string Sets the size of the button. variant contained contained , flat , outlined , raised string Sets the variant of the button. waves true Boolean value boolean Sets weather or not the button should have a ripple/waves effect when interacted with. Note Props other than those listed above such as className and style will be passed directly to the <button/> element.","title":"Props"},{"location":"components/card/","text":"Card Cards contain content and actions about a single subject. material.io Importing 1 2 3 4 5 6 7 8 9 10 import React from \"react\" ; import { Card } from \"photoncss/react\" ; export default function Component () { return ( < Card > ... content < /Card> ); } Props Name Default Possible Values Type Description display block block , inline string Sets the display property of the button. variant raised outlined , raised string Sets the variant of the card. Note Props other than those listed above such as className and style will be passed directly to the <div/> element. See also: CardActions CardBody CardImage CardOverline CardSubheader CardSubtitle CardTitle","title":"Card"},{"location":"components/card/#card","text":"Cards contain content and actions about a single subject. material.io","title":"Card"},{"location":"components/card/#importing","text":"1 2 3 4 5 6 7 8 9 10 import React from \"react\" ; import { Card } from \"photoncss/react\" ; export default function Component () { return ( < Card > ... content < /Card> ); }","title":"Importing"},{"location":"components/card/#props","text":"Name Default Possible Values Type Description display block block , inline string Sets the display property of the button. variant raised outlined , raised string Sets the variant of the card. Note Props other than those listed above such as className and style will be passed directly to the <div/> element. See also: CardActions CardBody CardImage CardOverline CardSubheader CardSubtitle CardTitle","title":"Props"},{"location":"components/cardactions/","text":"CardActions Cards contain content and actions about a single subject. material.io Importing 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import React from \"react\" ; import { Button , Card , CardActions } from \"photoncss/react\" ; export default function Component () { return ( < Card > ... content < CardActions > < Button variant = \"flat\" color = \"primary\" > Action 1 < Button > < Button variant = \"flat\" color = \"primary\" > Action 2 < Button > < /CardActions> < /Card> ); } Props Name Default Possible Values Type Description direction left left , right string Defines where the action buttons appear. seperated true Boolean value boolean Determines if the title has an underline seperating it from the cards body content. Note Props other than those listed above such as className and style will be passed directly to the <div/> element. See also: Card","title":"CardActions"},{"location":"components/cardactions/#cardactions","text":"Cards contain content and actions about a single subject. material.io","title":"CardActions"},{"location":"components/cardactions/#importing","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 import React from \"react\" ; import { Button , Card , CardActions } from \"photoncss/react\" ; export default function Component () { return ( < Card > ... content < CardActions > < Button variant = \"flat\" color = \"primary\" > Action 1 < Button > < Button variant = \"flat\" color = \"primary\" > Action 2 < Button > < /CardActions> < /Card> ); }","title":"Importing"},{"location":"components/cardactions/#props","text":"Name Default Possible Values Type Description direction left left , right string Defines where the action buttons appear. seperated true Boolean value boolean Determines if the title has an underline seperating it from the cards body content. Note Props other than those listed above such as className and style will be passed directly to the <div/> element. See also: Card","title":"Props"},{"location":"components/cardbody/","text":"CardBody CardBodys are used to add body content to your document. Most text should be wrapped in a paragraph. There is no component for CardBody's. Use the default HTML5 tag <p></p> . See also: Card","title":"CardBody"},{"location":"components/cardbody/#cardbody","text":"CardBodys are used to add body content to your document. Most text should be wrapped in a paragraph. There is no component for CardBody's. Use the default HTML5 tag <p></p> . See also: Card","title":"CardBody"},{"location":"components/cardimage/","text":"CardImage Cards contain content and actions about a single subject. material.io There is no component for CardImage. Use the default HTML5 tag <img/> . See also: Card","title":"CardImage"},{"location":"components/cardimage/#cardimage","text":"Cards contain content and actions about a single subject. material.io There is no component for CardImage. Use the default HTML5 tag <img/> . See also: Card","title":"CardImage"},{"location":"components/cardoverline/","text":"CardOverline Cards contain content and actions about a single subject. material.io Importing 1 2 3 4 5 6 7 8 9 10 11 import React from \"react\" ; import { Card , CardOverline } from \"photoncss/react\" ; export default function Component () { return ( < Card > < CardOverline > overline < /CardOverline> ... content < /Card> ); } See also: Card","title":"CardOverline"},{"location":"components/cardoverline/#cardoverline","text":"Cards contain content and actions about a single subject. material.io","title":"CardOverline"},{"location":"components/cardoverline/#importing","text":"1 2 3 4 5 6 7 8 9 10 11 import React from \"react\" ; import { Card , CardOverline } from \"photoncss/react\" ; export default function Component () { return ( < Card > < CardOverline > overline < /CardOverline> ... content < /Card> ); } See also: Card","title":"Importing"},{"location":"components/cardsubheader/","text":"CardSubheader Cards contain content and actions about a single subject. material.io Warning Not to be confused with the subtitle prop on the <CardTitle/> component or the <CardSubtitle/> component. Importing 1 2 3 4 5 6 7 8 9 10 11 12 import React from \"react\" ; import { Card , CardSubheader } from \"photoncss/react\" ; export default function Component () { return ( < Card > ... content < CardSubheader > Subheader < /CardSubheader> ... content < /Card> ); } See also: Card","title":"CardSubheader"},{"location":"components/cardsubheader/#cardsubheader","text":"Cards contain content and actions about a single subject. material.io Warning Not to be confused with the subtitle prop on the <CardTitle/> component or the <CardSubtitle/> component.","title":"CardSubheader"},{"location":"components/cardsubheader/#importing","text":"1 2 3 4 5 6 7 8 9 10 11 12 import React from \"react\" ; import { Card , CardSubheader } from \"photoncss/react\" ; export default function Component () { return ( < Card > ... content < CardSubheader > Subheader < /CardSubheader> ... content < /Card> ); } See also: Card","title":"Importing"},{"location":"components/cardsubtitle/","text":"CardSubtitle Cards contain content and actions about a single subject. material.io Warning Not to be confused with the subtitle prop on the <CardTitle/> component or the <CardSubheader/> component. Importing 1 2 3 4 5 6 7 8 9 10 11 12 import React from \"react\" ; import { Card , CardSubtitle } from \"photoncss/react\" ; export default function Component () { return ( < Card > ... content < CardSubtitle > Subheader < /CardSubtitle> ... content < /Card> ); } See also: Card","title":"CardSubtitle"},{"location":"components/cardsubtitle/#cardsubtitle","text":"Cards contain content and actions about a single subject. material.io Warning Not to be confused with the subtitle prop on the <CardTitle/> component or the <CardSubheader/> component.","title":"CardSubtitle"},{"location":"components/cardsubtitle/#importing","text":"1 2 3 4 5 6 7 8 9 10 11 12 import React from \"react\" ; import { Card , CardSubtitle } from \"photoncss/react\" ; export default function Component () { return ( < Card > ... content < CardSubtitle > Subheader < /CardSubtitle> ... content < /Card> ); } See also: Card","title":"Importing"},{"location":"components/cardtitle/","text":"CardTitle Cards contain content and actions about a single subject. material.io Importing 1 2 3 4 5 6 7 8 9 10 11 import React from \"react\" ; import { Card , CardTitle } from \"photoncss/react\" ; export default function Component () { return ( < Card > < CardTitle > Title < /CardTitle> ... content < /Card> ); } Props Name Default Possible Values Type Description seperated true Boolean value boolean Determines if the title has an underline seperating it from the cards body content. subtitle String value string Sets subtitle of the card. Note Props other than those listed above such as className and style will be passed directly to the <div/> element. See also: Card","title":"CardTitle"},{"location":"components/cardtitle/#cardtitle","text":"Cards contain content and actions about a single subject. material.io","title":"CardTitle"},{"location":"components/cardtitle/#importing","text":"1 2 3 4 5 6 7 8 9 10 11 import React from \"react\" ; import { Card , CardTitle } from \"photoncss/react\" ; export default function Component () { return ( < Card > < CardTitle > Title < /CardTitle> ... content < /Card> ); }","title":"Importing"},{"location":"components/cardtitle/#props","text":"Name Default Possible Values Type Description seperated true Boolean value boolean Determines if the title has an underline seperating it from the cards body content. subtitle String value string Sets subtitle of the card. Note Props other than those listed above such as className and style will be passed directly to the <div/> element. See also: Card","title":"Props"},{"location":"components/checkbox/","text":"Checkbox Checkboxes allow users to select one or more items from a set. Checkboxes can turn an option on or off. material.io Importing 1 2 3 4 5 6 7 8 import React from \"react\" ; import { Checkbox } from \"photoncss/react\" ; export default function Component () { return ( < Checkbox > text < /Checkbox> ); } Props Name Default Possible Values Type Description color none none , primary , secondary string Sets the color of the button. labelPosition after before , after string Sets which comes first, the label or the checkbox. variant normal normal , round string Sets the display style. waves true Boolean value boolean Sets weather or not the checkbox should have a ripple/waves effect when interacted with. Note Props other than those listed above such as className and style will be passed directly to the <input/> element.","title":"Checkbox"},{"location":"components/checkbox/#checkbox","text":"Checkboxes allow users to select one or more items from a set. Checkboxes can turn an option on or off. material.io","title":"Checkbox"},{"location":"components/checkbox/#importing","text":"1 2 3 4 5 6 7 8 import React from \"react\" ; import { Checkbox } from \"photoncss/react\" ; export default function Component () { return ( < Checkbox > text < /Checkbox> ); }","title":"Importing"},{"location":"components/checkbox/#props","text":"Name Default Possible Values Type Description color none none , primary , secondary string Sets the color of the button. labelPosition after before , after string Sets which comes first, the label or the checkbox. variant normal normal , round string Sets the display style. waves true Boolean value boolean Sets weather or not the checkbox should have a ripple/waves effect when interacted with. Note Props other than those listed above such as className and style will be passed directly to the <input/> element.","title":"Props"},{"location":"components/column/","text":"Column The Material Design responsive layout grid adapts to screen size and orientation, ensuring consistency across layouts. Material.io Importing 1 2 3 4 5 6 7 8 9 10 11 12 import React from \"react\" ; import { Row , Col } from \"photoncss/react\" ; export default function Component () { return ( < Row > < Col > ... content < /Col> < /Row> ); } Props Name Default Possible Values Type Description sm 12 Any number 1 - 12 number Sets the width out of 12 on small devices. md 12 Any number 1 - 12 number Sets the width out of 12 on medium devices. lg 12 Any number 1 - 12 number Sets the width out of 12 on large devices. xl 12 Any number 1 - 12 number Sets the width out of 12 on extra-large devices. Note Props other than those listed above such as className and style will be passed directly to the <div/> element. See also: Container Row","title":"Column"},{"location":"components/column/#column","text":"The Material Design responsive layout grid adapts to screen size and orientation, ensuring consistency across layouts. Material.io","title":"Column"},{"location":"components/column/#importing","text":"1 2 3 4 5 6 7 8 9 10 11 12 import React from \"react\" ; import { Row , Col } from \"photoncss/react\" ; export default function Component () { return ( < Row > < Col > ... content < /Col> < /Row> ); }","title":"Importing"},{"location":"components/column/#props","text":"Name Default Possible Values Type Description sm 12 Any number 1 - 12 number Sets the width out of 12 on small devices. md 12 Any number 1 - 12 number Sets the width out of 12 on medium devices. lg 12 Any number 1 - 12 number Sets the width out of 12 on large devices. xl 12 Any number 1 - 12 number Sets the width out of 12 on extra-large devices. Note Props other than those listed above such as className and style will be passed directly to the <div/> element. See also: Container Row","title":"Props"},{"location":"components/container/","text":"Container Containers are used to give the appropriate amount of padding on the left and right sides of your main content. These are used to prevent your content from being out of proportion on high resolution displays. Importing 1 2 3 4 5 6 7 8 9 10 import React from \"react\" ; import { Container } from \"photoncss/react\" ; export default function Component () { return ( < Container > ... content < /Container> ); } See also: Column Row","title":"Container"},{"location":"components/container/#container","text":"Containers are used to give the appropriate amount of padding on the left and right sides of your main content. These are used to prevent your content from being out of proportion on high resolution displays.","title":"Container"},{"location":"components/container/#importing","text":"1 2 3 4 5 6 7 8 9 10 import React from \"react\" ; import { Container } from \"photoncss/react\" ; export default function Component () { return ( < Container > ... content < /Container> ); } See also: Column Row","title":"Importing"},{"location":"components/dialog/","text":"Dialog \u26a0","title":"Dialog \u26a0"},{"location":"components/dialog/#dialog","text":"","title":"Dialog \u26a0"},{"location":"components/divider/","text":"Divider Dividers are used to seperate content from other sections of content. There is no component for Dividers's. Use the default HTML5 tag <hr/> .","title":"Divider"},{"location":"components/divider/#divider","text":"Dividers are used to seperate content from other sections of content. There is no component for Dividers's. Use the default HTML5 tag <hr/> .","title":"Divider"},{"location":"components/drawer/","text":"Drawer Navigation drawers provide access to destinations in your app. material.io Importing Drawer components are an extension of the <List/> component 1 2 3 4 5 6 7 8 9 10 import React from \"react\" ; import { Drawer } from \"photoncss/react\" ; export default function Component () { return ( < Drawer > ... content < /Drawer> ); } Props Name Default Possible Values Type Description from left left , right , top , bottom string Sets the origin of the drawer to slide out from when opened. swipe true Boolean value boolean Enables the drawer to be opened using a gesture on a touch display. Note Props other than those listed above such as className and style will be passed directly to the <aside/> element. Dynamic component The snippet above will not render any visible content. To use Drawers to their full potential, incorperate the Photon.Drawer() method.","title":"Drawer"},{"location":"components/drawer/#drawer","text":"Navigation drawers provide access to destinations in your app. material.io","title":"Drawer"},{"location":"components/drawer/#importing","text":"Drawer components are an extension of the <List/> component 1 2 3 4 5 6 7 8 9 10 import React from \"react\" ; import { Drawer } from \"photoncss/react\" ; export default function Component () { return ( < Drawer > ... content < /Drawer> ); }","title":"Importing"},{"location":"components/drawer/#props","text":"Name Default Possible Values Type Description from left left , right , top , bottom string Sets the origin of the drawer to slide out from when opened. swipe true Boolean value boolean Enables the drawer to be opened using a gesture on a touch display. Note Props other than those listed above such as className and style will be passed directly to the <aside/> element.","title":"Props"},{"location":"components/drawer/#dynamic-component","text":"The snippet above will not render any visible content. To use Drawers to their full potential, incorperate the Photon.Drawer() method.","title":"Dynamic component"},{"location":"components/headline/","text":"Headline Headlines are used to distinguish content sections from other content. There is no component for Headlines's. Use the default HTML5 tags <h1></h1> , <h2></h2> , <h3></h3> , <h4></h4> , <h5></h5> , <h6></h6> .","title":"Headline"},{"location":"components/headline/#headline","text":"Headlines are used to distinguish content sections from other content. There is no component for Headlines's. Use the default HTML5 tags <h1></h1> , <h2></h2> , <h3></h3> , <h4></h4> , <h5></h5> , <h6></h6> .","title":"Headline"},{"location":"components/icon/","text":"Icon Material Icons are available in five styles and a range of downloadable sizes and densities. The icons are crafted based on the core design principles and metrics of Material design guideline. material.io Importing 1 2 3 4 5 6 7 8 import React from \"react\" ; import { Icon } from \"photoncss/react\" ; export default function Component () { return ( < Icon > glyph < /Icon> ); } Note Glyph's are icons from the Material Icon Font , insert the icon name to display the icon. Props Name Default Possible Values Type Description ink true Boolean value boolean Sets weather or not the icon should have a ripple/ink effect when interacted with. variant normal normal , outlined , round , sharp , two-tone string Sets the variant of the icon. Note Props other than those listed above such as className and style will be passed directly to the <i/> element. See also: TextIcon","title":"Icon"},{"location":"components/icon/#icon","text":"Material Icons are available in five styles and a range of downloadable sizes and densities. The icons are crafted based on the core design principles and metrics of Material design guideline. material.io","title":"Icon"},{"location":"components/icon/#importing","text":"1 2 3 4 5 6 7 8 import React from \"react\" ; import { Icon } from \"photoncss/react\" ; export default function Component () { return ( < Icon > glyph < /Icon> ); } Note Glyph's are icons from the Material Icon Font , insert the icon name to display the icon.","title":"Importing"},{"location":"components/icon/#props","text":"Name Default Possible Values Type Description ink true Boolean value boolean Sets weather or not the icon should have a ripple/ink effect when interacted with. variant normal normal , outlined , round , sharp , two-tone string Sets the variant of the icon. Note Props other than those listed above such as className and style will be passed directly to the <i/> element. See also: TextIcon","title":"Props"},{"location":"components/inputfield/","text":"InputField Text fields let users enter and edit text. material.io Importing 1 2 3 4 5 6 7 8 import React from \"react\" ; import { InputField } from \"photoncss/react\" ; export default function Component () { return ( < InputField /> ); } Props Name Default Possible Values Type Description color none none , primary , secondary string Sets the color of the field. variant normal normal , outlined , filled string Sets the variant of the field. prefix String value string Sets the prefix of the field. suffix String value string Sets the suffix of the field. subtitle String value string Sets the subtitle of the field. dropdown Array of String values array < string > Makes the field a dropdown and sets the possible options. Note Props other than those listed above such as className and style will be passed directly to the wrapper element while input props will go to the <input/> element.","title":"InputField"},{"location":"components/inputfield/#inputfield","text":"Text fields let users enter and edit text. material.io","title":"InputField"},{"location":"components/inputfield/#importing","text":"1 2 3 4 5 6 7 8 import React from \"react\" ; import { InputField } from \"photoncss/react\" ; export default function Component () { return ( < InputField /> ); }","title":"Importing"},{"location":"components/inputfield/#props","text":"Name Default Possible Values Type Description color none none , primary , secondary string Sets the color of the field. variant normal normal , outlined , filled string Sets the variant of the field. prefix String value string Sets the prefix of the field. suffix String value string Sets the suffix of the field. subtitle String value string Sets the subtitle of the field. dropdown Array of String values array < string > Makes the field a dropdown and sets the possible options. Note Props other than those listed above such as className and style will be passed directly to the wrapper element while input props will go to the <input/> element.","title":"Props"},{"location":"components/list/","text":"List Lists are continuous, vertical indexes of text or images. material.io Importing All menu-like components extend this component 1 2 3 4 5 6 7 8 9 10 import React from \"react\" ; import { List } from \"photoncss/react\" ; export default function Component () { return ( < List > ... content < /List> ); } See also: ListItem ListSubheader","title":"List"},{"location":"components/list/#list","text":"Lists are continuous, vertical indexes of text or images. material.io","title":"List"},{"location":"components/list/#importing","text":"All menu-like components extend this component 1 2 3 4 5 6 7 8 9 10 import React from \"react\" ; import { List } from \"photoncss/react\" ; export default function Component () { return ( < List > ... content < /List> ); } See also: ListItem ListSubheader","title":"Importing"},{"location":"components/listitem/","text":"ListItem Lists are continuous, vertical indexes of text or images. material.io Importing 1 2 3 4 5 6 7 8 import React from \"react\" ; import { ListItem } from \"photoncss/react\" ; export default function Component () { return ( < ListItem > content < /ListItem> ); } Props Name Default Possible Values Type Description icon null TextIcon TextIcon Sets the icon in the front of the content. iconEnd null TextIcon TextIcon Sets the icon in the end of the content. round false Boolean value boolean Sets if the list item should have rounded corners. waves true Boolean value boolean Sets if the list item should utilize waves/ripples when interacted with. Note Props other than those listed above such as className and style will be passed directly to the <;i/> element. See also: List","title":"ListItem"},{"location":"components/listitem/#listitem","text":"Lists are continuous, vertical indexes of text or images. material.io","title":"ListItem"},{"location":"components/listitem/#importing","text":"1 2 3 4 5 6 7 8 import React from \"react\" ; import { ListItem } from \"photoncss/react\" ; export default function Component () { return ( < ListItem > content < /ListItem> ); }","title":"Importing"},{"location":"components/listitem/#props","text":"Name Default Possible Values Type Description icon null TextIcon TextIcon Sets the icon in the front of the content. iconEnd null TextIcon TextIcon Sets the icon in the end of the content. round false Boolean value boolean Sets if the list item should have rounded corners. waves true Boolean value boolean Sets if the list item should utilize waves/ripples when interacted with. Note Props other than those listed above such as className and style will be passed directly to the <;i/> element. See also: List","title":"Props"},{"location":"components/listsubheader/","text":"ListSubheader Lists are continuous, vertical indexes of text or images. material.io Importing 1 2 3 4 5 6 7 8 import React from \"react\" ; import { ListSubheader } from \"photoncss/react\" ; export default function Component () { return ( < ListSubheader > content < /ListSubheader> ); } See also: List","title":"ListSubheader"},{"location":"components/listsubheader/#listsubheader","text":"Lists are continuous, vertical indexes of text or images. material.io","title":"ListSubheader"},{"location":"components/listsubheader/#importing","text":"1 2 3 4 5 6 7 8 import React from \"react\" ; import { ListSubheader } from \"photoncss/react\" ; export default function Component () { return ( < ListSubheader > content < /ListSubheader> ); } See also: List","title":"Importing"},{"location":"components/menu/","text":"Menu Menus display a list of choices on temporary surfaces. material.io Importing Menu components are an extension of the <List/> component 1 2 3 4 5 6 7 8 9 10 import React from \"react\" ; import { Menu } from \"photoncss/react\" ; export default function Component () { return ( < Menu > ... content < /Menu> ); } Dynamic component The snippet above will not render any visible content. To use Menus to their full potential, incorperate the Photon.Menu() method.","title":"Menu"},{"location":"components/menu/#menu","text":"Menus display a list of choices on temporary surfaces. material.io","title":"Menu"},{"location":"components/menu/#importing","text":"Menu components are an extension of the <List/> component 1 2 3 4 5 6 7 8 9 10 import React from \"react\" ; import { Menu } from \"photoncss/react\" ; export default function Component () { return ( < Menu > ... content < /Menu> ); }","title":"Importing"},{"location":"components/menu/#dynamic-component","text":"The snippet above will not render any visible content. To use Menus to their full potential, incorperate the Photon.Menu() method.","title":"Dynamic component"},{"location":"components/paragraph/","text":"Paragraph Paragraphs are used to add body content to your document. Most text should be wrapped in a paragraph. There is no component for Paragraph's. Use the default HTML5 tag <p></p> .","title":"Paragraph"},{"location":"components/paragraph/#paragraph","text":"Paragraphs are used to add body content to your document. Most text should be wrapped in a paragraph. There is no component for Paragraph's. Use the default HTML5 tag <p></p> .","title":"Paragraph"},{"location":"components/radio/","text":"Radio Radio buttons allow users to select one option from a set. material.io Importing 1 2 3 4 5 6 7 8 import React from \"react\" ; import { Radio } from \"photoncss/react\" ; export default function Component () { return ( < Radio > text < /Radio> ); } Props Name Default Possible Values Type Description color none none , primary , secondary string Sets the color of the button. labelPosition after before , after string Sets which comes first, the label or the radio button. waves true Boolean value boolean Sets weather or not the radio button should have a ripple/waves effect when interacted with. Note Props other than those listed above such as className and style will be passed directly to the <input/> element.","title":"Radio"},{"location":"components/radio/#radio","text":"Radio buttons allow users to select one option from a set. material.io","title":"Radio"},{"location":"components/radio/#importing","text":"1 2 3 4 5 6 7 8 import React from \"react\" ; import { Radio } from \"photoncss/react\" ; export default function Component () { return ( < Radio > text < /Radio> ); }","title":"Importing"},{"location":"components/radio/#props","text":"Name Default Possible Values Type Description color none none , primary , secondary string Sets the color of the button. labelPosition after before , after string Sets which comes first, the label or the radio button. waves true Boolean value boolean Sets weather or not the radio button should have a ripple/waves effect when interacted with. Note Props other than those listed above such as className and style will be passed directly to the <input/> element.","title":"Props"},{"location":"components/row/","text":"Row The Material Design responsive layout grid adapts to screen size and orientation, ensuring consistency across layouts. Material.io Importing 1 2 3 4 5 6 7 8 9 10 import React from \"react\" ; import { Row } from \"photoncss/react\" ; export default function Component () { return ( < Row > ... columns < /Row> ); } See also: Column Container","title":"Row"},{"location":"components/row/#row","text":"The Material Design responsive layout grid adapts to screen size and orientation, ensuring consistency across layouts. Material.io","title":"Row"},{"location":"components/row/#importing","text":"1 2 3 4 5 6 7 8 9 10 import React from \"react\" ; import { Row } from \"photoncss/react\" ; export default function Component () { return ( < Row > ... columns < /Row> ); } See also: Column Container","title":"Importing"},{"location":"components/shadow/","text":"Shadow In material design, everything should have a certain z-depth that determines how far raised or close to the page the element is. Shadow classes You can add the class raised-{0-24} to any item to give it a shadow. The number represents the elevation in dp. There are also: raised-{0-24} raised-hover-{0-24} raised-focus-{0-24} raised-active-{0-24} Example 1 < div class = \"raised-2 raised-hover-4 raised-active-8\" > Raised Element </ div >","title":"Shadow"},{"location":"components/shadow/#shadow","text":"In material design, everything should have a certain z-depth that determines how far raised or close to the page the element is.","title":"Shadow"},{"location":"components/shadow/#shadow-classes","text":"You can add the class raised-{0-24} to any item to give it a shadow. The number represents the elevation in dp. There are also: raised-{0-24} raised-hover-{0-24} raised-focus-{0-24} raised-active-{0-24}","title":"Shadow classes"},{"location":"components/shadow/#example","text":"1 < div class = \"raised-2 raised-hover-4 raised-active-8\" > Raised Element </ div >","title":"Example"},{"location":"components/snackbar/","text":"Snackbar Snackbars provide brief messages about app processes at the bottom of the screen. material.io Importing 1 2 3 4 5 6 7 8 9 10 11 import React from \"react\" ; import { Button , Snackbar } from \"photoncss/react\" ; export default function Component () { return ( < Snackbar > < p > I am a snackbar !< /p> < Button variant = \"flat\" color = \"secondary\" > action < /Button> < /Snackbar> ); } The snippet above displays a static snackbar. To use them to send the user notifications, you must use the Photon.Snackbar() method.","title":"Snackbar"},{"location":"components/snackbar/#snackbar","text":"Snackbars provide brief messages about app processes at the bottom of the screen. material.io","title":"Snackbar"},{"location":"components/snackbar/#importing","text":"1 2 3 4 5 6 7 8 9 10 11 import React from \"react\" ; import { Button , Snackbar } from \"photoncss/react\" ; export default function Component () { return ( < Snackbar > < p > I am a snackbar !< /p> < Button variant = \"flat\" color = \"secondary\" > action < /Button> < /Snackbar> ); } The snippet above displays a static snackbar. To use them to send the user notifications, you must use the Photon.Snackbar() method.","title":"Importing"},{"location":"components/spinner/","text":"Spinner \u26a0","title":"Spinner \u26a0"},{"location":"components/spinner/#spinner","text":"","title":"Spinner \u26a0"},{"location":"components/switch/","text":"Switch Switches toggle the state of a single item on or off. material.io Importing 1 2 3 4 5 6 7 8 import React from \"react\" ; import { Switch } from \"photoncss/react\" ; export default function Component () { return ( < Switch > text < /Switch> ); } Props Name Default Possible Values Type Description color none none , primary , secondary string Sets the color of the button. labelPosition after before , after string Sets which comes first, the label or the switch. waves true Boolean value boolean Sets weather or not the switch should have a ripple/waves effect when interacted with. Note Props other than those listed above such as className and style will be passed directly to the <input/> element.","title":"Switch"},{"location":"components/switch/#switch","text":"Switches toggle the state of a single item on or off. material.io","title":"Switch"},{"location":"components/switch/#importing","text":"1 2 3 4 5 6 7 8 import React from \"react\" ; import { Switch } from \"photoncss/react\" ; export default function Component () { return ( < Switch > text < /Switch> ); }","title":"Importing"},{"location":"components/switch/#props","text":"Name Default Possible Values Type Description color none none , primary , secondary string Sets the color of the button. labelPosition after before , after string Sets which comes first, the label or the switch. waves true Boolean value boolean Sets weather or not the switch should have a ripple/waves effect when interacted with. Note Props other than those listed above such as className and style will be passed directly to the <input/> element.","title":"Props"},{"location":"components/texticon/","text":"TextIcon Material Icons are available in five styles and a range of downloadable sizes and densities. The icons are crafted based on the core design principles and metrics of Material design guideline. material.io Importing 1 2 3 4 5 6 7 8 9 10 import React from \"react\" ; import { TextIcon } from \"photoncss/react\" ; export default function Component () { return ( < p > This is a paragraph that contains a < TextIcon > menu < /TextIcon> icon! < /p> ); } Note Glyph's are icons from the Material Icon Font , insert the icon name to display the icon. Props Name Default Possible Values Type Description variant normal normal , outlined , round , sharp , two-tone string Sets the variant of the icon. Note Props other than those listed above such as className and style will be passed directly to the <i/> element. See also: Icon","title":"TextIcon"},{"location":"components/texticon/#texticon","text":"Material Icons are available in five styles and a range of downloadable sizes and densities. The icons are crafted based on the core design principles and metrics of Material design guideline. material.io","title":"TextIcon"},{"location":"components/texticon/#importing","text":"1 2 3 4 5 6 7 8 9 10 import React from \"react\" ; import { TextIcon } from \"photoncss/react\" ; export default function Component () { return ( < p > This is a paragraph that contains a < TextIcon > menu < /TextIcon> icon! < /p> ); } Note Glyph's are icons from the Material Icon Font , insert the icon name to display the icon.","title":"Importing"},{"location":"components/texticon/#props","text":"Name Default Possible Values Type Description variant normal normal , outlined , round , sharp , two-tone string Sets the variant of the icon. Note Props other than those listed above such as className and style will be passed directly to the <i/> element. See also: Icon","title":"Props"},{"location":"components/themeprovider/","text":"ThemeProvider As of v12 , themes are no longer LESS based or come precompiled. Now themes use CSS variables. Without using <ThemeProvider/> only basic styles will be rendered. Importing 1 2 3 4 5 6 7 8 9 10 import React from \"react\" ; import { ThemeProvider } from \"photoncss/react\" ; export default function Component () { return ( < ThemeProvider > ... content goes here < /ThemeProvider> ); } Props Name Default Possible Values Type Description global false Boolean value boolean Tells the provider to override global CSS variables if true. If false, creates a scope and wraps content in a span element with the CSS variables. This is useful if you have a component subtree that you want to be a different theme than the root components. theme default.light Any Photon theme string | Theme Sets theme of the provider Demo Global Theme Toggle 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 import React , { useState } from \"react\" ; import { render } from \"react-dom\" ; import { ThemeProvider , Button } from \"photoncss/react\" ; import \"photoncss/dist/photon.css\" ; // Define array of themes that can be toggled through const themes = [ \"default.light\" , \"default.dark\" ]; export default function Root () { // Initialize theme state const [ themeId , setThemeId ] = useState ( parseInt ( localStorage . getItem ( \"themeId\" ) || \"0\" )); // Define function to increment theme function nextTheme () { // Iterate to next theme in array or reset to first item let nextThemeId = themeId + 1 ; if ( nextThemeId >= themes . length ) nextThemeId = 0 ; // Save theme id and change state localStorage . setItem ( \"themeId\" , nextThemeId ); setThemeId ( nextThemeId ); } // Render component return ( < ThemeProvider global theme = { themes [ themeId ]} > < Button variant = \"raised\" color = \"primary\" onClick = { nextTheme } > Switch to { themeId === 1 ? \"light\" : \"dark\" } theme < /Button> < /ThemeProvider> ); } // Wait for the DOM to load before rendering document . addEventListener ( \"DOMContentLoaded\" , function () { // Append a container to the DOM to render content into const root = document . createElement ( \"DIV\" ); root . id = \"root\" ; document . body . append ( root ); // Render root component into react-root container render ( < Root /> , document . getElementById ( \"root\" )); });","title":"ThemeProvider"},{"location":"components/themeprovider/#themeprovider","text":"As of v12 , themes are no longer LESS based or come precompiled. Now themes use CSS variables. Without using <ThemeProvider/> only basic styles will be rendered.","title":"ThemeProvider"},{"location":"components/themeprovider/#importing","text":"1 2 3 4 5 6 7 8 9 10 import React from \"react\" ; import { ThemeProvider } from \"photoncss/react\" ; export default function Component () { return ( < ThemeProvider > ... content goes here < /ThemeProvider> ); }","title":"Importing"},{"location":"components/themeprovider/#props","text":"Name Default Possible Values Type Description global false Boolean value boolean Tells the provider to override global CSS variables if true. If false, creates a scope and wraps content in a span element with the CSS variables. This is useful if you have a component subtree that you want to be a different theme than the root components. theme default.light Any Photon theme string | Theme Sets theme of the provider","title":"Props"},{"location":"components/themeprovider/#demo","text":"","title":"Demo"},{"location":"components/themeprovider/#global-theme-toggle","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 import React , { useState } from \"react\" ; import { render } from \"react-dom\" ; import { ThemeProvider , Button } from \"photoncss/react\" ; import \"photoncss/dist/photon.css\" ; // Define array of themes that can be toggled through const themes = [ \"default.light\" , \"default.dark\" ]; export default function Root () { // Initialize theme state const [ themeId , setThemeId ] = useState ( parseInt ( localStorage . getItem ( \"themeId\" ) || \"0\" )); // Define function to increment theme function nextTheme () { // Iterate to next theme in array or reset to first item let nextThemeId = themeId + 1 ; if ( nextThemeId >= themes . length ) nextThemeId = 0 ; // Save theme id and change state localStorage . setItem ( \"themeId\" , nextThemeId ); setThemeId ( nextThemeId ); } // Render component return ( < ThemeProvider global theme = { themes [ themeId ]} > < Button variant = \"raised\" color = \"primary\" onClick = { nextTheme } > Switch to { themeId === 1 ? \"light\" : \"dark\" } theme < /Button> < /ThemeProvider> ); } // Wait for the DOM to load before rendering document . addEventListener ( \"DOMContentLoaded\" , function () { // Append a container to the DOM to render content into const root = document . createElement ( \"DIV\" ); root . id = \"root\" ; document . body . append ( root ); // Render root component into react-root container render ( < Root /> , document . getElementById ( \"root\" )); });","title":"Global Theme Toggle"},{"location":"components/toolbar/","text":"Toolbar \u26a0","title":"Toolbar \u26a0"},{"location":"components/toolbar/#toolbar","text":"","title":"Toolbar \u26a0"},{"location":"components/toolbaractions/","text":"ToolbarActions \u26a0","title":"ToolbarActions \u26a0"},{"location":"components/toolbaractions/#toolbaractions","text":"","title":"ToolbarActions \u26a0"},{"location":"components/toolbartitle/","text":"ToolbarTitle \u26a0","title":"ToolbarTitle \u26a0"},{"location":"components/toolbartitle/#toolbartitle","text":"","title":"ToolbarTitle \u26a0"},{"location":"components/vhalign/","text":"VHAlign \u26a0","title":"VHAlign \u26a0"},{"location":"components/vhalign/#vhalign","text":"","title":"VHAlign \u26a0"},{"location":"public-methods/Drawer/","text":"Photon.Drawer() Interact with <Drawer/> components in the DOM. Importing 1 import Photon from \"photoncss\" ; Use the default export Usage 1 Photon . Drawer ( drawer_element ); returns new Drawer Arguments Argument Type Description drawer_element string | jQuery | Element Any of the allowed types that resolves to an element on the DOM. Class Properties .isOpen : boolean Gets if the drawer is open. .target : jQuery Get the drawer element on the DOM. Methods .close() : this Closes the drawer. .open() : this Closes the drawer. Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import React , { Fragment } from \"react\" ; import Photon from \"photoncss\" ; import { Button , Drawer } from \"photoncss/react\" ; export function MyDrawer () { return ( < Drawer id = \"my-drawer\" > Hi , im a drawer < /Drawer> ); } export default function Component () { return ( < Fragment > < MyDrawer /> < Button color = \"primary\" variant = \"raised\" onClick = { () => Photon . Drawer ( \"#my-drawer\" ). open () } > Show drawer < /Button> < /Fragment> ); }","title":"Photon.Drawer()"},{"location":"public-methods/Drawer/#photondrawer","text":"Interact with <Drawer/> components in the DOM.","title":"Photon.Drawer()"},{"location":"public-methods/Drawer/#importing","text":"1 import Photon from \"photoncss\" ; Use the default export","title":"Importing"},{"location":"public-methods/Drawer/#usage","text":"1 Photon . Drawer ( drawer_element ); returns new Drawer","title":"Usage"},{"location":"public-methods/Drawer/#arguments","text":"Argument Type Description drawer_element string | jQuery | Element Any of the allowed types that resolves to an element on the DOM.","title":"Arguments"},{"location":"public-methods/Drawer/#class","text":"","title":"Class"},{"location":"public-methods/Drawer/#properties","text":".isOpen : boolean Gets if the drawer is open. .target : jQuery Get the drawer element on the DOM.","title":"Properties"},{"location":"public-methods/Drawer/#methods","text":".close() : this Closes the drawer. .open() : this Closes the drawer.","title":"Methods"},{"location":"public-methods/Drawer/#example","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import React , { Fragment } from \"react\" ; import Photon from \"photoncss\" ; import { Button , Drawer } from \"photoncss/react\" ; export function MyDrawer () { return ( < Drawer id = \"my-drawer\" > Hi , im a drawer < /Drawer> ); } export default function Component () { return ( < Fragment > < MyDrawer /> < Button color = \"primary\" variant = \"raised\" onClick = { () => Photon . Drawer ( \"#my-drawer\" ). open () } > Show drawer < /Button> < /Fragment> ); }","title":"Example"},{"location":"public-methods/Menu/","text":"Photon.Menu() Interact with <Menu/> components in the DOM. Importing 1 import Photon from \"photoncss\" ; Use the default export Usage 1 Photon . Menu ( menu_element ); returns new Menu Arguments Argument Type Description menu_element string | jQuery | Element Any of the allowed types that resolves to an element on the DOM. Class Properties .isOpen : boolean Gets if the menu is open. .target : jQuery Get the menu element on the DOM. Methods .anchor(positionX: number, positionY: number) : this .anchor(anchorToElement: string | jQuery | Element) : this Sets the menu position. .close() : this Closes the menu. .open() : this Closes the menu. Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import React , { Fragment } from \"react\" ; import Photon from \"photoncss\" ; import { Button , Menu } from \"photoncss/react\" ; export function MyMenu () { return ( < Menu id = \"my-menu\" > Hi , im a menu < /Menu> ); } export default function Component () { return ( < Fragment > < MyMenu /> < Button color = \"primary\" variant = \"raised\" onClick = { () => Photon . Menu ( \"#my-menu\" ). open () } > Show menu < /Button> < /Fragment> ); }","title":"Photon.Menu()"},{"location":"public-methods/Menu/#photonmenu","text":"Interact with <Menu/> components in the DOM.","title":"Photon.Menu()"},{"location":"public-methods/Menu/#importing","text":"1 import Photon from \"photoncss\" ; Use the default export","title":"Importing"},{"location":"public-methods/Menu/#usage","text":"1 Photon . Menu ( menu_element ); returns new Menu","title":"Usage"},{"location":"public-methods/Menu/#arguments","text":"Argument Type Description menu_element string | jQuery | Element Any of the allowed types that resolves to an element on the DOM.","title":"Arguments"},{"location":"public-methods/Menu/#class","text":"","title":"Class"},{"location":"public-methods/Menu/#properties","text":".isOpen : boolean Gets if the menu is open. .target : jQuery Get the menu element on the DOM.","title":"Properties"},{"location":"public-methods/Menu/#methods","text":".anchor(positionX: number, positionY: number) : this .anchor(anchorToElement: string | jQuery | Element) : this Sets the menu position. .close() : this Closes the menu. .open() : this Closes the menu.","title":"Methods"},{"location":"public-methods/Menu/#example","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import React , { Fragment } from \"react\" ; import Photon from \"photoncss\" ; import { Button , Menu } from \"photoncss/react\" ; export function MyMenu () { return ( < Menu id = \"my-menu\" > Hi , im a menu < /Menu> ); } export default function Component () { return ( < Fragment > < MyMenu /> < Button color = \"primary\" variant = \"raised\" onClick = { () => Photon . Menu ( \"#my-menu\" ). open () } > Show menu < /Button> < /Fragment> ); }","title":"Example"},{"location":"public-methods/Snackbar/","text":"Photon.Snackar() Interact with <Snackar/> components in the DOM. Importing 1 import Photon from \"photoncss\" ; Use the default export Usage 1 Photon . Snackbar ( < Snackbar /> , options ); returns new Snackbar Arguments Argument Type Description snackbar JSX Snackbar element. options Object Snackbar options. options.id? string Snackbar ID. options.duration? number | null Time in milliseconds to show snackbar for, use null to show forever. Class Properties .isOpen : boolean Gets if the drawer is open. .snackbar : jQuery Get the drawer element on the DOM. .options : Object Get the options the snackbar was shown with. Methods .close() : this Closes the drawer. .open() : this Closes the drawer. Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import React , { Fragment } from \"react\" ; import Photon from \"photoncss\" ; import { Button , Snackbar } from \"photoncss/react\" ; export function MySnackbar () { return ( < Snackbar > < p > Hi , im a drawer < /p> < /Snackbar> ); } export default function Component () { return ( < Fragment > < Button color = \"primary\" variant = \"raised\" onClick = { () => Photon . Snackbar ( < MySnackbar /> ) } > Show snackbar < /Button> < /Fragment> ); }","title":"Photon.Snackar()"},{"location":"public-methods/Snackbar/#photonsnackar","text":"Interact with <Snackar/> components in the DOM.","title":"Photon.Snackar()"},{"location":"public-methods/Snackbar/#importing","text":"1 import Photon from \"photoncss\" ; Use the default export","title":"Importing"},{"location":"public-methods/Snackbar/#usage","text":"1 Photon . Snackbar ( < Snackbar /> , options ); returns new Snackbar","title":"Usage"},{"location":"public-methods/Snackbar/#arguments","text":"Argument Type Description snackbar JSX Snackbar element. options Object Snackbar options. options.id? string Snackbar ID. options.duration? number | null Time in milliseconds to show snackbar for, use null to show forever.","title":"Arguments"},{"location":"public-methods/Snackbar/#class","text":"","title":"Class"},{"location":"public-methods/Snackbar/#properties","text":".isOpen : boolean Gets if the drawer is open. .snackbar : jQuery Get the drawer element on the DOM. .options : Object Get the options the snackbar was shown with.","title":"Properties"},{"location":"public-methods/Snackbar/#methods","text":".close() : this Closes the drawer. .open() : this Closes the drawer.","title":"Methods"},{"location":"public-methods/Snackbar/#example","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import React , { Fragment } from \"react\" ; import Photon from \"photoncss\" ; import { Button , Snackbar } from \"photoncss/react\" ; export function MySnackbar () { return ( < Snackbar > < p > Hi , im a drawer < /p> < /Snackbar> ); } export default function Component () { return ( < Fragment > < Button color = \"primary\" variant = \"raised\" onClick = { () => Photon . Snackbar ( < MySnackbar /> ) } > Show snackbar < /Button> < /Fragment> ); }","title":"Example"}]}